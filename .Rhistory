kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
agg_list
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
warnings()
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
## Load all functions necessary from subdirectory
source('src/rivm_utils/RIVM_functions.R')
progress_counter = 1
for(td in test_dates) {
print(paste0("Date ",progress_counter,"/",length(test_dates), " (",td,")"))
## Initialize relevant data
rep.data <- dataSetup(
data         = df,
start.date   = as.Date(td)-50, # Starting date of outbreak - 2013-01-01+(39-1)
end.date     = as.Date(td)+50, # Ending date of outbreak (in real-time, leave NULL so end.date = nowcast.date)
nowcast.date = as.Date(td),    # Nowcast date
days.back    = 39,                    # Number of days back from nowcast.date to include in estimation procedure
f.priordelay = f.priordelay)          # Prior reporting delay PMF
model.setup <- modelSetup(
data = rep.data,
ord = 2,
kappa = list(u = 1e6, b = 1e6, w = 0.01, s = 1e-6))
nowcast.list <- nowcast(
data = rep.data,
model = model.setup,
levels = levels)
ncst <- nowcast.list$nowcast
## Go along 14 recent observations
for(p in 0:13) {
temp_date = format(as.Date(td) - p, format="%Y-%m-%d")
#print(paste("Temp date to investigate", temp_date))
temp_lvls = ncst[ncst$Date == temp_date, ]
# Add levels to agg_list to use later, is array, index p
bounds <- matrix(nrow = length(levels), ncol = 2)
lower_columns <- paste((1 - levels) / 2)
upper_columns <- paste((1 + levels) / 2)
for (i in seq_along(levels)) {
#print(paste(temp_lvls[lower_columns[i]], temp_lvls[upper_columns[i]]))
bounds[i, 1] <- temp_lvls[[lower_columns[i]]]
bounds[i, 2] <- temp_lvls[[upper_columns[i]]]
}
agg_list[[td]][(p+1),,] <- bounds
#print(agg_list[[td]][(p+1),,])
}
progress_counter = progress_counter+1
}
